'use strict';

var ohm = require("../lib/ohm.js");

var toExport = {
  grammar,
  semantics,
  grammarCST,
  ohmSemantics
};

if(typeof module !== "undefined" && typeof module.exports !== "undefined"){
  module.exports = toExport;
} else {
  Object.assign(window, toExport);
}

var grammar = null,
    semantics = null,
    grammarCST = null,
    ohmSemantics = null;

document.addEventListener("DOMContentLoaded", function(){
  let script = document.querySelector('script[type="text/ohm-js"]:not(#es5)');

  toExport.grammar = ohm.grammarFromScriptElement(script);
  toExport.semantics = toExport.grammar.semantics();
  // toExport.grammarCST = ohm.ohmGrammar.match(script.textContent);
  // toExport.ohmSemantics = ohm.ohmGrammar.semantics();

  toExport.InferBraces = ohm.makeRecipe((function() {
    var buildSuperGrammar = (function() {
      var buildSuperGrammar = (function() {
        return new this.newGrammar("ES5")
          .withDefaultStartRule("Program")
          .define("Program", [], this.seq(this.star(this.app("Directive")), this.star(this.app("SourceElement"))))
          .define("sourceCharacter", [], this.app("any"))
          .override("space", [], this.alt(this.app("whitespace"), this.app("lineTerminator"), this.app("comment")))
          .define("whitespace_verticalTab", [], this.prim("\u000b"))
          .define("whitespace_formFeed", [], this.prim("\f"))
          .define("whitespace_noBreakSpace", [], this.prim(" "))
          .define("whitespace_byteOrderMark", [], this.prim("﻿"))
          .define("whitespace", [], this.alt(this.prim("\t"), this.app("whitespace_verticalTab"), this.app("whitespace_formFeed"), this.prim(" "), this.app("whitespace_noBreakSpace"), this.app("whitespace_byteOrderMark"), this.app("unicodeSpaceSeparator")))
          .define("lineTerminator", [], this.alt(this.prim("\n"), this.prim("\r"), this.prim("\u2028"), this.prim("\u2029")))
          .define("lineTerminatorSequence", [], this.alt(this.prim("\n"), this.seq(this.prim("\r"), this.not(this.prim("\n"))), this.prim("\u2028"), this.prim("\u2029"), this.prim("\r\n")))
          .define("comment", [], this.alt(this.app("multiLineComment"), this.app("singleLineComment")))
          .define("multiLineComment", [], this.seq(this.prim("/*"), this.star(this.seq(this.not(this.prim("*/")), this.app("sourceCharacter"))), this.prim("*/")))
          .define("singleLineComment", [], this.seq(this.prim("//"), this.star(this.seq(this.not(this.app("lineTerminator")), this.app("sourceCharacter")))))
          .define("identifier", [], this.seq(this.not(this.app("reservedWord")), this.app("identifierName")), "an indentifier")
          .define("identifierName", [], this.seq(this.app("identifierStart"), this.star(this.app("identifierPart"))))
          .define("identifierStart_escaped", [], this.seq(this.prim("\\"), this.app("unicodeEscapeSequence")))
          .define("identifierStart", [], this.alt(this.app("letter"), this.prim("$"), this.prim("_"), this.app("identifierStart_escaped")))
          .define("identifierPart", [], this.alt(this.app("identifierStart"), this.app("unicodeCombiningMark"), this.app("unicodeDigit"), this.app("unicodeConnectorPunctuation"), this.prim("‌"), this.prim("‍")))
          .extend("letter", [], this.app("unicodeCategoryNl"))
          .define("unicodeCategoryNl", [], this.alt(this.range("Ⅰ", "ↂ"), this.prim("〇"), this.range("〡", "〩")))
          .define("unicodeDigit", [], this.alt(this.range("0", "9"), this.range("٠", "٩"), this.range("۰", "۹"), this.range("०", "९"), this.range("০", "৯"), this.range("੦", "੯"), this.range("૦", "૯"), this.range("୦", "୯"), this.range("௧", "௯"), this.range("౦", "౯"), this.range("೦", "೯"), this.range("൦", "൯"), this.range("๐", "๙"), this.range("໐", "໙"), this.range("༠", "༩"), this.range("０", "９")), "a digit")
          .define("unicodeCombiningMark", [], this.alt(this.range("̀", "ͅ"), this.range("͠", "͡"), this.range("҃", "҆"), this.range("֑", "֡"), this.range("֣", "ֹ"), this.range("ֻ", "ֽ"), this.range("ֿ", "ֿ"), this.range("ׁ", "ׂ"), this.range("ׄ", "ׄ"), this.range("ً", "ْ"), this.range("ٰ", "ٰ"), this.range("ۖ", "ۜ"), this.range("۟", "ۤ"), this.range("ۧ", "ۨ"), this.range("۪", "ۭ"), this.range("ँ", "ं"), this.range("़", "़"), this.range("ु", "ै"), this.range("्", "्"), this.range("॑", "॔"), this.range("ॢ", "ॣ"), this.range("ঁ", "ঁ"), this.range("়", "়"), this.range("ু", "ৄ"), this.range("্", "্"), this.range("ৢ", "ৣ"), this.range("ਂ", "ਂ"), this.range("਼", "਼"), this.range("ੁ", "ੂ"), this.range("ੇ", "ੈ"), this.range("ੋ", "੍"), this.range("ੰ", "ੱ"), this.range("ઁ", "ં"), this.range("઼", "઼"), this.range("ુ", "ૅ"), this.range("ે", "ૈ"), this.range("્", "્"), this.range("ଁ", "ଁ"), this.range("଼", "଼"), this.range("ି", "ି"), this.range("ୁ", "ୃ"), this.range("୍", "୍"), this.range("ୖ", "ୖ"), this.range("ஂ", "ஂ"), this.range("ீ", "ீ"), this.range("்", "்"), this.range("ా", "ీ"), this.range("ె", "ై"), this.range("ొ", "్"), this.range("ౕ", "ౖ"), this.range("ಿ", "ಿ"), this.range("ೆ", "ೆ"), this.range("ೌ", "್"), this.range("ു", "ൃ"), this.range("്", "്"), this.range("ั", "ั"), this.range("ิ", "ฺ"), this.range("็", "๎"), this.range("ັ", "ັ"), this.range("ິ", "ູ"), this.range("ົ", "ຼ"), this.range("່", "ໍ"), this.range("༘", "༙"), this.range("༵", "༵"), this.range("༷", "༷"), this.range("༹", "༹"), this.range("ཱ", "ཾ"), this.range("ྀ", "྄"), this.range("྆", "྇"), this.range("ྐ", "ྕ"), this.range("ྗ", "ྗ"), this.range("ྙ", "ྭ"), this.range("ྱ", "ྷ"), this.range("ྐྵ", "ྐྵ"), this.range("⃐", "⃜"), this.range("⃡", "⃡"), this.range("〪", "〯"), this.range("゙", "゚"), this.range("ﬞ", "ﬞ"), this.range("︠", "︣")), "a Unicode combining mark")
          .define("unicodeConnectorPunctuation", [], this.alt(this.prim("_"), this.range("‿", "⁀"), this.prim("・"), this.range("︳", "︴"), this.range("﹍", "﹏"), this.prim("＿"), this.prim("･")))
          .define("unicodeSpaceSeparator", [], this.alt(this.range(" ", "​"), this.prim("　")))
          .define("reservedWord", [], this.alt(this.app("keyword"), this.app("futureReservedWord"), this.app("nullLiteral"), this.app("booleanLiteral")))
          .define("keyword", [], this.alt(this.app("break"), this.app("do"), this.app("instanceof"), this.app("typeof"), this.app("case"), this.app("else"), this.app("new"), this.app("var"), this.app("catch"), this.app("finally"), this.app("return"), this.app("void"), this.app("continue"), this.app("for"), this.app("switch"), this.app("while"), this.app("debugger"), this.app("function"), this.app("this"), this.app("with"), this.app("default"), this.app("if"), this.app("throw"), this.app("delete"), this.app("in"), this.app("try")))
          .define("futureReservedWordLax", [], this.alt(this.app("class"), this.app("enum"), this.app("extends"), this.app("super"), this.app("const"), this.app("export"), this.app("import")))
          .define("futureReservedWordStrict", [], this.alt(this.app("futureReservedWordLax"), this.app("implements"), this.app("let"), this.app("private"), this.app("public"), this.app("interface"), this.app("package"), this.app("protected"), this.app("static"), this.app("yield")))
          .define("futureReservedWord", [], this.app("futureReservedWordStrict"))
          .define("literal", [], this.alt(this.app("nullLiteral"), this.app("booleanLiteral"), this.app("numericLiteral"), this.app("stringLiteral"), this.app("regularExpressionLiteral")))
          .define("nullLiteral", [], this.seq(this.prim("null"), this.not(this.app("identifierPart"))))
          .define("booleanLiteral", [], this.seq(this.alt(this.prim("true"), this.prim("false")), this.not(this.app("identifierPart"))))
          .define("numericLiteral", [], this.alt(this.app("octalIntegerLiteral"), this.app("hexIntegerLiteral"), this.app("decimalLiteral")))
          .define("decimalLiteral_bothParts", [], this.seq(this.app("decimalIntegerLiteral"), this.prim("."), this.star(this.app("decimalDigit")), this.app("exponentPart")))
          .define("decimalLiteral_decimalsOnly", [], this.seq(this.prim("."), this.plus(this.app("decimalDigit")), this.app("exponentPart")))
          .define("decimalLiteral_integerOnly", [], this.seq(this.app("decimalIntegerLiteral"), this.app("exponentPart")))
          .define("decimalLiteral", [], this.alt(this.app("decimalLiteral_bothParts"), this.app("decimalLiteral_decimalsOnly"), this.app("decimalLiteral_integerOnly")))
          .define("decimalIntegerLiteral_nonZero", [], this.seq(this.app("nonZeroDigit"), this.star(this.app("decimalDigit"))))
          .define("decimalIntegerLiteral_zero", [], this.prim("0"))
          .define("decimalIntegerLiteral", [], this.alt(this.app("decimalIntegerLiteral_nonZero"), this.app("decimalIntegerLiteral_zero")))
          .define("decimalDigit", [], this.range("0", "9"))
          .define("nonZeroDigit", [], this.range("1", "9"))
          .define("exponentPart_present", [], this.seq(this.app("exponentIndicator"), this.app("signedInteger")))
          .define("exponentPart_absent", [], this.seq())
          .define("exponentPart", [], this.alt(this.app("exponentPart_present"), this.app("exponentPart_absent")))
          .define("exponentIndicator", [], this.alt(this.prim("e"), this.prim("E")))
          .define("signedInteger_positive", [], this.seq(this.prim("+"), this.star(this.app("decimalDigit"))))
          .define("signedInteger_negative", [], this.seq(this.prim("-"), this.star(this.app("decimalDigit"))))
          .define("signedInteger_noSign", [], this.plus(this.app("decimalDigit")))
          .define("signedInteger", [], this.alt(this.app("signedInteger_positive"), this.app("signedInteger_negative"), this.app("signedInteger_noSign")))
          .define("hexIntegerLiteral", [], this.alt(this.seq(this.prim("0x"), this.plus(this.app("hexDigit"))), this.seq(this.prim("0X"), this.plus(this.app("hexDigit")))))
          .define("octalIntegerLiteral", [], this.seq(this.prim("0"), this.plus(this.app("octalDigit"))))
          .define("octalDigit", [], this.range("0", "7"))
          .define("stringLiteral", [], this.alt(this.seq(this.prim("\""), this.star(this.app("doubleStringCharacter")), this.prim("\"")), this.seq(this.prim("'"), this.star(this.app("singleStringCharacter")), this.prim("'"))))
          .define("doubleStringCharacter_nonEscaped", [], this.seq(this.not(this.alt(this.prim("\""), this.prim("\\"), this.app("lineTerminator"))), this.app("sourceCharacter")))
          .define("doubleStringCharacter_escaped", [], this.seq(this.prim("\\"), this.app("escapeSequence")))
          .define("doubleStringCharacter_lineContinuation", [], this.app("lineContinuation"))
          .define("doubleStringCharacter", [], this.alt(this.app("doubleStringCharacter_nonEscaped"), this.app("doubleStringCharacter_escaped"), this.app("doubleStringCharacter_lineContinuation")))
          .define("singleStringCharacter_nonEscaped", [], this.seq(this.not(this.alt(this.prim("'"), this.prim("\\"), this.app("lineTerminator"))), this.app("sourceCharacter")))
          .define("singleStringCharacter_escaped", [], this.seq(this.prim("\\"), this.app("escapeSequence")))
          .define("singleStringCharacter_lineContinuation", [], this.app("lineContinuation"))
          .define("singleStringCharacter", [], this.alt(this.app("singleStringCharacter_nonEscaped"), this.app("singleStringCharacter_escaped"), this.app("singleStringCharacter_lineContinuation")))
          .define("lineContinuation", [], this.seq(this.prim("\\"), this.app("lineTerminatorSequence")))
          .define("escapeSequence", [], this.alt(this.app("unicodeEscapeSequence"), this.app("hexEscapeSequence"), this.app("octalEscapeSequence"), this.app("characterEscapeSequence")))
          .define("characterEscapeSequence", [], this.alt(this.app("singleEscapeCharacter"), this.app("nonEscapeCharacter")))
          .define("singleEscapeCharacter", [], this.alt(this.prim("'"), this.prim("\""), this.prim("\\"), this.prim("b"), this.prim("f"), this.prim("n"), this.prim("r"), this.prim("t"), this.prim("v")))
          .define("nonEscapeCharacter", [], this.seq(this.not(this.alt(this.app("escapeCharacter"), this.app("lineTerminator"))), this.app("sourceCharacter")))
          .define("escapeCharacter", [], this.alt(this.app("singleEscapeCharacter"), this.app("decimalDigit"), this.prim("x"), this.prim("u")))
          .define("octalEscapeSequence_whole", [], this.seq(this.app("zeroToThree"), this.app("octalDigit"), this.app("octalDigit")))
          .define("octalEscapeSequence_eightTimesfourToSeven", [], this.seq(this.app("fourToSeven"), this.app("octalDigit")))
          .define("octalEscapeSequence_eightTimesZeroToThree", [], this.seq(this.app("zeroToThree"), this.app("octalDigit"), this.not(this.app("decimalDigit"))))
          .define("octalEscapeSequence_octal", [], this.seq(this.app("octalDigit"), this.not(this.app("decimalDigit"))))
          .define("octalEscapeSequence", [], this.alt(this.app("octalEscapeSequence_whole"), this.app("octalEscapeSequence_eightTimesfourToSeven"), this.app("octalEscapeSequence_eightTimesZeroToThree"), this.app("octalEscapeSequence_octal")))
          .define("hexEscapeSequence", [], this.seq(this.prim("x"), this.app("hexDigit"), this.app("hexDigit")))
          .define("unicodeEscapeSequence", [], this.seq(this.prim("u"), this.app("hexDigit"), this.app("hexDigit"), this.app("hexDigit"), this.app("hexDigit")))
          .define("zeroToThree", [], this.range("0", "3"))
          .define("fourToSeven", [], this.range("4", "7"))
          .define("regularExpressionLiteral", [], this.seq(this.prim("/"), this.app("regularExpressionBody"), this.prim("/"), this.app("regularExpressionFlags")))
          .define("regularExpressionBody", [], this.seq(this.app("regularExpressionFirstChar"), this.star(this.app("regularExpressionChar"))))
          .define("regularExpressionFirstChar", [], this.alt(this.seq(this.not(this.alt(this.prim("*"), this.prim("\\"), this.prim("/"), this.prim("["))), this.app("regularExpressionNonTerminator")), this.app("regularExpressionBackslashSequence"), this.app("regularExpressionClass")))
          .define("regularExpressionChar", [], this.alt(this.seq(this.not(this.alt(this.prim("\\"), this.prim("/"), this.prim("["))), this.app("regularExpressionNonTerminator")), this.app("regularExpressionBackslashSequence"), this.app("regularExpressionClass")))
          .define("regularExpressionBackslashSequence", [], this.seq(this.prim("\\"), this.app("regularExpressionNonTerminator")))
          .define("regularExpressionNonTerminator", [], this.seq(this.not(this.app("lineTerminator")), this.app("sourceCharacter")))
          .define("regularExpressionClass", [], this.seq(this.prim("["), this.star(this.app("regularExpressionClassChar")), this.prim("]")))
          .define("regularExpressionClassChar", [], this.alt(this.seq(this.not(this.alt(this.prim("]"), this.prim("\\"))), this.app("regularExpressionNonTerminator")), this.app("regularExpressionBackslashSequence")))
          .define("regularExpressionFlags", [], this.star(this.app("identifierPart")))
          .define("multiLineCommentNoNL", [], this.seq(this.prim("/*"), this.star(this.seq(this.not(this.alt(this.prim("*/"), this.app("lineTerminator"))), this.app("sourceCharacter"))), this.prim("*/")))
          .define("spacesNoNL", [], this.star(this.alt(this.app("whitespace"), this.app("singleLineComment"), this.app("multiLineCommentNoNL"))))
          .define("sc", [], this.alt(this.seq(this.star(this.app("space")), this.alt(this.prim(";"), this.app("end"))), this.seq(this.app("spacesNoNL"), this.alt(this.app("lineTerminator"), this.seq(this.not(this.app("multiLineCommentNoNL")), this.app("multiLineComment")), this.la(this.prim("}"))))))
          .define("break", [], this.seq(this.prim("break"), this.not(this.app("identifierPart"))))
          .define("do", [], this.seq(this.prim("do"), this.not(this.app("identifierPart"))))
          .define("instanceof", [], this.seq(this.prim("instanceof"), this.not(this.app("identifierPart"))))
          .define("typeof", [], this.seq(this.prim("typeof"), this.not(this.app("identifierPart"))))
          .define("case", [], this.seq(this.prim("case"), this.not(this.app("identifierPart"))))
          .define("else", [], this.seq(this.prim("else"), this.not(this.app("identifierPart"))))
          .define("new", [], this.seq(this.prim("new"), this.not(this.app("identifierPart"))))
          .define("var", [], this.seq(this.prim("var"), this.not(this.app("identifierPart"))))
          .define("catch", [], this.seq(this.prim("catch"), this.not(this.app("identifierPart"))))
          .define("finally", [], this.seq(this.prim("finally"), this.not(this.app("identifierPart"))))
          .define("return", [], this.seq(this.prim("return"), this.not(this.app("identifierPart"))))
          .define("void", [], this.seq(this.prim("void"), this.not(this.app("identifierPart"))))
          .define("continue", [], this.seq(this.prim("continue"), this.not(this.app("identifierPart"))))
          .define("for", [], this.seq(this.prim("for"), this.not(this.app("identifierPart"))))
          .define("switch", [], this.seq(this.prim("switch"), this.not(this.app("identifierPart"))))
          .define("while", [], this.seq(this.prim("while"), this.not(this.app("identifierPart"))))
          .define("debugger", [], this.seq(this.prim("debugger"), this.not(this.app("identifierPart"))))
          .define("function", [], this.seq(this.prim("function"), this.not(this.app("identifierPart"))))
          .define("this", [], this.seq(this.prim("this"), this.not(this.app("identifierPart"))))
          .define("with", [], this.seq(this.prim("with"), this.not(this.app("identifierPart"))))
          .define("default", [], this.seq(this.prim("default"), this.not(this.app("identifierPart"))))
          .define("if", [], this.seq(this.prim("if"), this.not(this.app("identifierPart"))))
          .define("throw", [], this.seq(this.prim("throw"), this.not(this.app("identifierPart"))))
          .define("delete", [], this.seq(this.prim("delete"), this.not(this.app("identifierPart"))))
          .define("in", [], this.seq(this.prim("in"), this.not(this.app("identifierPart"))))
          .define("try", [], this.seq(this.prim("try"), this.not(this.app("identifierPart"))))
          .define("get", [], this.seq(this.prim("get"), this.not(this.app("identifierPart"))))
          .define("set", [], this.seq(this.prim("set"), this.not(this.app("identifierPart"))))
          .define("class", [], this.seq(this.prim("class"), this.not(this.app("identifierPart"))))
          .define("enum", [], this.seq(this.prim("enum"), this.not(this.app("identifierPart"))))
          .define("extends", [], this.seq(this.prim("extends"), this.not(this.app("identifierPart"))))
          .define("super", [], this.seq(this.prim("super"), this.not(this.app("identifierPart"))))
          .define("const", [], this.seq(this.prim("const"), this.not(this.app("identifierPart"))))
          .define("export", [], this.seq(this.prim("export"), this.not(this.app("identifierPart"))))
          .define("import", [], this.seq(this.prim("import"), this.not(this.app("identifierPart"))))
          .define("implements", [], this.seq(this.prim("implements"), this.not(this.app("identifierPart"))))
          .define("let", [], this.seq(this.prim("let"), this.not(this.app("identifierPart"))))
          .define("private", [], this.seq(this.prim("private"), this.not(this.app("identifierPart"))))
          .define("public", [], this.seq(this.prim("public"), this.not(this.app("identifierPart"))))
          .define("interface", [], this.seq(this.prim("interface"), this.not(this.app("identifierPart"))))
          .define("package", [], this.seq(this.prim("package"), this.not(this.app("identifierPart"))))
          .define("protected", [], this.seq(this.prim("protected"), this.not(this.app("identifierPart"))))
          .define("static", [], this.seq(this.prim("static"), this.not(this.app("identifierPart"))))
          .define("yield", [], this.seq(this.prim("yield"), this.not(this.app("identifierPart"))))
          .define("noIn", [], this.not(this.app("in")))
          .define("withIn", [], this.seq())
          .define("PrimaryExpression_parenExpr", [], this.seq(this.prim("("), this.app("Expression", [this.app("withIn")]), this.prim(")")))
          .define("PrimaryExpression", [], this.alt(this.app("this"), this.app("identifier"), this.app("literal"), this.app("ArrayLiteral"), this.app("ObjectLiteral"), this.app("PrimaryExpression_parenExpr")))
          .define("ArrayLiteral", [], this.seq(this.prim("["), this.app("ListOf", [this.app("AssignmentExpressionOrElision"), this.prim(",")]), this.prim("]")))
          .define("AssignmentExpressionOrElision_elision", [], this.seq())
          .define("AssignmentExpressionOrElision", [], this.alt(this.app("AssignmentExpression", [this.app("withIn")]), this.app("AssignmentExpressionOrElision_elision")))
          .define("ObjectLiteral_noTrailingComma", [], this.seq(this.prim("{"), this.app("ListOf", [this.app("PropertyAssignment"), this.prim(",")]), this.prim("}")))
          .define("ObjectLiteral_trailingComma", [], this.seq(this.prim("{"), this.app("NonemptyListOf", [this.app("PropertyAssignment"), this.prim(",")]), this.prim(","), this.prim("}")))
          .define("ObjectLiteral", [], this.alt(this.app("ObjectLiteral_noTrailingComma"), this.app("ObjectLiteral_trailingComma")))
          .define("PropertyAssignment_getter", [], this.seq(this.app("get"), this.app("PropertyName"), this.prim("("), this.prim(")"), this.prim("{"), this.app("FunctionBody"), this.prim("}")))
          .define("PropertyAssignment_setter", [], this.seq(this.app("set"), this.app("PropertyName"), this.prim("("), this.app("FormalParameter"), this.prim(")"), this.prim("{"), this.app("FunctionBody"), this.prim("}")))
          .define("PropertyAssignment_simple", [], this.seq(this.app("PropertyName"), this.prim(":"), this.app("AssignmentExpression", [this.app("withIn")])))
          .define("PropertyAssignment", [], this.alt(this.app("PropertyAssignment_getter"), this.app("PropertyAssignment_setter"), this.app("PropertyAssignment_simple")))
          .define("PropertyName", [], this.alt(this.app("identifierName"), this.app("stringLiteral"), this.app("numericLiteral")))
          .define("MemberExpression_arrayRefExp", [], this.seq(this.app("MemberExpression"), this.prim("["), this.app("Expression", [this.app("withIn")]), this.prim("]")))
          .define("MemberExpression_propRefExp", [], this.seq(this.app("MemberExpression"), this.prim("."), this.app("identifierName")))
          .define("MemberExpression_newExp", [], this.seq(this.app("new"), this.app("MemberExpression"), this.app("Arguments")))
          .define("MemberExpression", [], this.alt(this.app("MemberExpression_arrayRefExp"), this.app("MemberExpression_propRefExp"), this.app("MemberExpression_newExp"), this.app("FunctionExpression"), this.app("PrimaryExpression")))
          .define("NewExpression_newExp", [], this.seq(this.app("new"), this.app("NewExpression")))
          .define("NewExpression", [], this.alt(this.app("MemberExpression"), this.app("NewExpression_newExp")))
          .define("CallExpression_arrayRefExp", [], this.seq(this.app("CallExpression"), this.prim("["), this.app("Expression", [this.app("withIn")]), this.prim("]")))
          .define("CallExpression_propRefExp", [], this.seq(this.app("CallExpression"), this.prim("."), this.app("identifierName")))
          .define("CallExpression_callExpExp", [], this.seq(this.app("CallExpression"), this.app("Arguments")))
          .define("CallExpression_memberExpExp", [], this.seq(this.app("MemberExpression"), this.app("Arguments")))
          .define("CallExpression", [], this.alt(this.app("CallExpression_arrayRefExp"), this.app("CallExpression_propRefExp"), this.app("CallExpression_callExpExp"), this.app("CallExpression_memberExpExp")))
          .define("Arguments", [], this.seq(this.prim("("), this.app("ListOf", [this.app("AssignmentExpression", [this.app("withIn")]), this.prim(",")]), this.prim(")")))
          .define("LeftHandSideExpression", [], this.alt(this.app("CallExpression"), this.app("NewExpression")))
          .define("PostfixExpression_postIncrement", [], this.seq(this.app("LeftHandSideExpression"), this.lex(this.seq(this.app("spacesNoNL"), this.prim("++")))))
          .define("PostfixExpression_postDecrement", [], this.seq(this.app("LeftHandSideExpression"), this.lex(this.seq(this.app("spacesNoNL"), this.prim("--")))))
          .define("PostfixExpression", [], this.alt(this.app("PostfixExpression_postIncrement"), this.app("PostfixExpression_postDecrement"), this.app("LeftHandSideExpression")))
          .define("UnaryExpression_deleteExp", [], this.seq(this.app("delete"), this.app("UnaryExpression")))
          .define("UnaryExpression_voidExp", [], this.seq(this.app("void"), this.app("UnaryExpression")))
          .define("UnaryExpression_typeofExp", [], this.seq(this.app("typeof"), this.app("UnaryExpression")))
          .define("UnaryExpression_preIncrement", [], this.seq(this.prim("++"), this.app("UnaryExpression")))
          .define("UnaryExpression_preDecrement", [], this.seq(this.prim("--"), this.app("UnaryExpression")))
          .define("UnaryExpression_unaryPlus", [], this.seq(this.prim("+"), this.app("UnaryExpression")))
          .define("UnaryExpression_unaryMinus", [], this.seq(this.prim("-"), this.app("UnaryExpression")))
          .define("UnaryExpression_bnot", [], this.seq(this.prim("~"), this.app("UnaryExpression")))
          .define("UnaryExpression_lnot", [], this.seq(this.prim("!"), this.app("UnaryExpression")))
          .define("UnaryExpression", [], this.alt(this.app("UnaryExpression_deleteExp"), this.app("UnaryExpression_voidExp"), this.app("UnaryExpression_typeofExp"), this.app("UnaryExpression_preIncrement"), this.app("UnaryExpression_preDecrement"), this.app("UnaryExpression_unaryPlus"), this.app("UnaryExpression_unaryMinus"), this.app("UnaryExpression_bnot"), this.app("UnaryExpression_lnot"), this.app("PostfixExpression")))
          .define("MultiplicativeExpression_mul", [], this.seq(this.app("MultiplicativeExpression"), this.prim("*"), this.app("UnaryExpression")))
          .define("MultiplicativeExpression_div", [], this.seq(this.app("MultiplicativeExpression"), this.prim("/"), this.app("UnaryExpression")))
          .define("MultiplicativeExpression_mod", [], this.seq(this.app("MultiplicativeExpression"), this.prim("%"), this.app("UnaryExpression")))
          .define("MultiplicativeExpression", [], this.alt(this.app("MultiplicativeExpression_mul"), this.app("MultiplicativeExpression_div"), this.app("MultiplicativeExpression_mod"), this.app("UnaryExpression")))
          .define("AdditiveExpression_add", [], this.seq(this.app("AdditiveExpression"), this.prim("+"), this.app("MultiplicativeExpression")))
          .define("AdditiveExpression_sub", [], this.seq(this.app("AdditiveExpression"), this.prim("-"), this.app("MultiplicativeExpression")))
          .define("AdditiveExpression", [], this.alt(this.app("AdditiveExpression_add"), this.app("AdditiveExpression_sub"), this.app("MultiplicativeExpression")))
          .define("ShiftExpression_lsl", [], this.seq(this.app("ShiftExpression"), this.prim("<<"), this.app("AdditiveExpression")))
          .define("ShiftExpression_lsr", [], this.seq(this.app("ShiftExpression"), this.prim(">>>"), this.app("AdditiveExpression")))
          .define("ShiftExpression_asr", [], this.seq(this.app("ShiftExpression"), this.prim(">>"), this.app("AdditiveExpression")))
          .define("ShiftExpression", [], this.alt(this.app("ShiftExpression_lsl"), this.app("ShiftExpression_lsr"), this.app("ShiftExpression_asr"), this.app("AdditiveExpression")))
          .define("RelationalExpression_lt", ["guardIn"], this.seq(this.app("RelationalExpression", [this.param(0)]), this.prim("<"), this.app("ShiftExpression")))
          .define("RelationalExpression_gt", ["guardIn"], this.seq(this.app("RelationalExpression", [this.param(0)]), this.prim(">"), this.app("ShiftExpression")))
          .define("RelationalExpression_le", ["guardIn"], this.seq(this.app("RelationalExpression", [this.param(0)]), this.prim("<="), this.app("ShiftExpression")))
          .define("RelationalExpression_ge", ["guardIn"], this.seq(this.app("RelationalExpression", [this.param(0)]), this.prim(">="), this.app("ShiftExpression")))
          .define("RelationalExpression_instanceOfExp", ["guardIn"], this.seq(this.app("RelationalExpression", [this.param(0)]), this.prim("instanceof"), this.app("ShiftExpression")))
          .define("RelationalExpression_inExp", ["guardIn"], this.seq(this.app("RelationalExpression", [this.param(0)]), this.param(0), this.prim("in"), this.app("ShiftExpression")))
          .define("RelationalExpression", ["guardIn"], this.alt(this.app("RelationalExpression_lt", [this.app("guardIn")]), this.app("RelationalExpression_gt", [this.app("guardIn")]), this.app("RelationalExpression_le", [this.app("guardIn")]), this.app("RelationalExpression_ge", [this.app("guardIn")]), this.app("RelationalExpression_instanceOfExp", [this.app("guardIn")]), this.app("RelationalExpression_inExp", [this.app("guardIn")]), this.app("ShiftExpression")))
          .define("EqualityExpression_equal", ["guardIn"], this.seq(this.app("EqualityExpression", [this.param(0)]), this.prim("=="), this.app("RelationalExpression", [this.param(0)])))
          .define("EqualityExpression_notEqual", ["guardIn"], this.seq(this.app("EqualityExpression", [this.param(0)]), this.prim("!="), this.app("RelationalExpression", [this.param(0)])))
          .define("EqualityExpression_eq", ["guardIn"], this.seq(this.app("EqualityExpression", [this.param(0)]), this.prim("==="), this.app("RelationalExpression", [this.param(0)])))
          .define("EqualityExpression_notEq", ["guardIn"], this.seq(this.app("EqualityExpression", [this.param(0)]), this.prim("!=="), this.app("RelationalExpression", [this.param(0)])))
          .define("EqualityExpression", ["guardIn"], this.alt(this.app("EqualityExpression_equal", [this.app("guardIn")]), this.app("EqualityExpression_notEqual", [this.app("guardIn")]), this.app("EqualityExpression_eq", [this.app("guardIn")]), this.app("EqualityExpression_notEq", [this.app("guardIn")]), this.app("RelationalExpression", [this.param(0)])))
          .define("BitwiseANDExpression_band", ["guardIn"], this.seq(this.app("BitwiseANDExpression", [this.param(0)]), this.prim("&"), this.app("EqualityExpression", [this.param(0)])))
          .define("BitwiseANDExpression", ["guardIn"], this.alt(this.app("BitwiseANDExpression_band", [this.app("guardIn")]), this.app("EqualityExpression", [this.param(0)])))
          .define("BitwiseXORExpression_bxor", ["guardIn"], this.seq(this.app("BitwiseXORExpression", [this.param(0)]), this.prim("^"), this.app("BitwiseANDExpression", [this.param(0)])))
          .define("BitwiseXORExpression", ["guardIn"], this.alt(this.app("BitwiseXORExpression_bxor", [this.app("guardIn")]), this.app("BitwiseANDExpression", [this.param(0)])))
          .define("BitwiseORExpression_bor", ["guardIn"], this.seq(this.app("BitwiseORExpression", [this.param(0)]), this.prim("|"), this.app("BitwiseXORExpression", [this.param(0)])))
          .define("BitwiseORExpression", ["guardIn"], this.alt(this.app("BitwiseORExpression_bor", [this.app("guardIn")]), this.app("BitwiseXORExpression", [this.param(0)])))
          .define("LogicalANDExpression_land", ["guardIn"], this.seq(this.app("LogicalANDExpression", [this.param(0)]), this.prim("&&"), this.app("BitwiseORExpression", [this.param(0)])))
          .define("LogicalANDExpression", ["guardIn"], this.alt(this.app("LogicalANDExpression_land", [this.app("guardIn")]), this.app("BitwiseORExpression", [this.param(0)])))
          .define("LogicalORExpression_lor", ["guardIn"], this.seq(this.app("LogicalORExpression", [this.param(0)]), this.prim("||"), this.app("LogicalANDExpression", [this.param(0)])))
          .define("LogicalORExpression", ["guardIn"], this.alt(this.app("LogicalORExpression_lor", [this.app("guardIn")]), this.app("LogicalANDExpression", [this.param(0)])))
          .define("ConditionalExpression_conditional", ["guardIn"], this.seq(this.app("LogicalORExpression", [this.param(0)]), this.prim("?"), this.app("AssignmentExpression", [this.app("withIn")]), this.prim(":"), this.app("AssignmentExpression", [this.param(0)])))
          .define("ConditionalExpression", ["guardIn"], this.alt(this.app("ConditionalExpression_conditional", [this.app("guardIn")]), this.app("LogicalORExpression", [this.param(0)])))
          .define("AssignmentExpression_assignment", ["guardIn"], this.seq(this.app("LeftHandSideExpression"), this.app("AssignmentOperator"), this.app("AssignmentExpression", [this.param(0)])))
          .define("AssignmentExpression", ["guardIn"], this.alt(this.app("AssignmentExpression_assignment", [this.app("guardIn")]), this.app("ConditionalExpression", [this.param(0)])))
          .define("Expression_commaExp", ["guardIn"], this.seq(this.app("Expression", [this.param(0)]), this.prim(","), this.app("AssignmentExpression", [this.param(0)])))
          .define("Expression", ["guardIn"], this.alt(this.app("Expression_commaExp", [this.app("guardIn")]), this.app("AssignmentExpression", [this.param(0)])), "an expression")
          .define("AssignmentOperator", [], this.alt(this.prim("="), this.prim(">>>="), this.prim("<<="), this.prim(">>="), this.prim("*="), this.prim("/="), this.prim("%="), this.prim("+="), this.prim("-="), this.prim("&="), this.prim("^="), this.prim("|=")))
          .define("Statement", [], this.alt(this.app("Block"), this.app("VariableStatement"), this.app("EmptyStatement"), this.app("ExpressionStatement"), this.app("IfStatement"), this.app("IterationStatement"), this.app("ContinueStatement"), this.app("BreakStatement"), this.app("ReturnStatement"), this.app("WithStatement"), this.app("LabelledStatement"), this.app("SwitchStatement"), this.app("ThrowStatement"), this.app("TryStatement"), this.app("DebuggerStatement")), "a statement")
          .define("Block", [], this.seq(this.prim("{"), this.app("StatementList"), this.prim("}")))
          .define("StatementList", [], this.star(this.app("Statement")))
          .define("VariableStatement", [], this.seq(this.app("var"), this.app("VariableDeclarationList", [this.app("withIn")]), this.lex(this.app("sc"))))
          .define("VariableDeclarationList", ["guardIn"], this.app("NonemptyListOf", [this.app("VariableDeclaration", [this.param(0)]), this.prim(",")]))
          .define("VariableDeclaration", ["guardIn"], this.seq(this.app("identifier"), this.opt(this.app("Initialiser", [this.param(0)]))))
          .define("Initialiser", ["guardIn"], this.seq(this.prim("="), this.app("AssignmentExpression", [this.param(0)])))
          .define("EmptyStatement", [], this.prim(";"))
          .define("ExpressionStatement", [], this.seq(this.not(this.alt(this.prim("{"), this.app("function"))), this.app("Expression", [this.app("withIn")]), this.lex(this.app("sc"))))
          .define("IfStatement", [], this.seq(this.app("if"), this.prim("("), this.app("Expression", [this.app("withIn")]), this.prim(")"), this.app("Statement"), this.opt(this.seq(this.app("else"), this.app("Statement")))))
          .define("IterationStatement_doWhile", [], this.seq(this.app("do"), this.app("Statement"), this.app("while"), this.prim("("), this.app("Expression", [this.app("withIn")]), this.prim(")"), this.lex(this.app("sc"))))
          .define("IterationStatement_whileDo", [], this.seq(this.app("while"), this.prim("("), this.app("Expression", [this.app("withIn")]), this.prim(")"), this.app("Statement")))
          .define("IterationStatement_for3", [], this.seq(this.app("for"), this.prim("("), this.opt(this.app("Expression", [this.app("noIn")])), this.prim(";"), this.opt(this.app("Expression", [this.app("withIn")])), this.prim(";"), this.opt(this.app("Expression", [this.app("withIn")])), this.prim(")"), this.app("Statement")))
          .define("IterationStatement_for3var", [], this.seq(this.app("for"), this.prim("("), this.app("var"), this.app("VariableDeclarationList", [this.app("noIn")]), this.prim(";"), this.opt(this.app("Expression", [this.app("withIn")])), this.prim(";"), this.opt(this.app("Expression", [this.app("withIn")])), this.prim(")"), this.app("Statement")))
          .define("IterationStatement_forIn", [], this.seq(this.app("for"), this.prim("("), this.app("LeftHandSideExpression"), this.app("in"), this.app("Expression", [this.app("withIn")]), this.prim(")"), this.app("Statement")))
          .define("IterationStatement_forInVar", [], this.seq(this.app("for"), this.prim("("), this.app("var"), this.app("VariableDeclaration", [this.app("noIn")]), this.app("in"), this.app("Expression", [this.app("withIn")]), this.prim(")"), this.app("Statement")))
          .define("IterationStatement", [], this.alt(this.app("IterationStatement_doWhile"), this.app("IterationStatement_whileDo"), this.app("IterationStatement_for3"), this.app("IterationStatement_for3var"), this.app("IterationStatement_forIn"), this.app("IterationStatement_forInVar")))
          .define("ContinueStatement", [], this.seq(this.app("continue"), this.lex(this.seq(this.opt(this.seq(this.app("spacesNoNL"), this.app("identifier"))), this.app("sc")))))
          .define("BreakStatement", [], this.seq(this.app("break"), this.lex(this.seq(this.opt(this.seq(this.app("spacesNoNL"), this.app("identifier"))), this.app("sc")))))
          .define("ReturnStatement", [], this.seq(this.app("return"), this.opt(this.seq(this.lex(this.seq(this.app("spacesNoNL"), this.not(this.app("space")))), this.app("Expression", [this.app("withIn")]))), this.lex(this.app("sc"))))
          .define("WithStatement", [], this.seq(this.app("with"), this.prim("("), this.app("Expression", [this.app("withIn")]), this.prim(")"), this.app("Statement")))
          .define("SwitchStatement", [], this.seq(this.app("switch"), this.prim("("), this.app("Expression", [this.app("withIn")]), this.prim(")"), this.app("CaseBlock")))
          .define("CaseBlock_withDefault", [], this.seq(this.prim("{"), this.star(this.app("CaseClause")), this.app("DefaultClause"), this.star(this.app("CaseClause")), this.prim("}")))
          .define("CaseBlock_withoutDefault", [], this.seq(this.prim("{"), this.star(this.app("CaseClause")), this.prim("}")))
          .define("CaseBlock", [], this.alt(this.app("CaseBlock_withDefault"), this.app("CaseBlock_withoutDefault")))
          .define("CaseClause", [], this.seq(this.app("case"), this.app("Expression", [this.app("withIn")]), this.prim(":"), this.star(this.app("Statement"))))
          .define("DefaultClause", [], this.seq(this.app("default"), this.prim(":"), this.star(this.app("Statement"))))
          .define("LabelledStatement", [], this.seq(this.app("identifier"), this.prim(":"), this.app("Statement")))
          .define("ThrowStatement_throwExpr", [], this.seq(this.app("throw"), this.app("Expression", [this.app("withIn")]), this.lex(this.app("sc"))))
          .define("ThrowStatement", [], this.app("ThrowStatement_throwExpr"))
          .define("TryStatement_tryCatchFinally", [], this.seq(this.app("try"), this.app("Block"), this.app("Catch"), this.app("Finally")))
          .define("TryStatement_tryFinally", [], this.seq(this.app("try"), this.app("Block"), this.app("Finally")))
          .define("TryStatement_tryCatch", [], this.seq(this.app("try"), this.app("Block"), this.app("Catch")))
          .define("TryStatement", [], this.alt(this.app("TryStatement_tryCatchFinally"), this.app("TryStatement_tryFinally"), this.app("TryStatement_tryCatch")))
          .define("Catch", [], this.seq(this.app("catch"), this.prim("("), this.app("FormalParameter"), this.prim(")"), this.app("Block")))
          .define("Finally", [], this.seq(this.app("finally"), this.app("Block")))
          .define("DebuggerStatement", [], this.lex(this.seq(this.app("debugger"), this.app("sc"))))
          .define("FunctionDeclaration", [], this.seq(this.app("function"), this.app("identifier"), this.prim("("), this.app("FormalParameterList"), this.prim(")"), this.prim("{"), this.app("FunctionBody"), this.prim("}")))
          .define("FunctionExpression_named", [], this.seq(this.app("function"), this.app("identifier"), this.prim("("), this.app("FormalParameterList"), this.prim(")"), this.prim("{"), this.app("FunctionBody"), this.prim("}")))
          .define("FunctionExpression_anonymous", [], this.seq(this.app("function"), this.prim("("), this.app("FormalParameterList"), this.prim(")"), this.prim("{"), this.app("FunctionBody"), this.prim("}")))
          .define("FunctionExpression", [], this.alt(this.app("FunctionExpression_named"), this.app("FunctionExpression_anonymous")))
          .define("FormalParameterList", [], this.app("ListOf", [this.app("FormalParameter"), this.prim(",")]))
          .define("FormalParameter", [], this.app("identifier"))
          .define("FunctionBody", [], this.seq(this.star(this.app("Directive")), this.star(this.app("SourceElement"))))
          .define("SourceElement", [], this.alt(this.app("Declaration"), this.app("Statement")))
          .define("Declaration", [], this.app("FunctionDeclaration"))
          .define("Directive", [], this.seq(this.app("stringLiteral"), this.lex(this.app("sc"))))
          .build();
      });
        return new this.newGrammar("ES6")
          .withSuperGrammar(buildSuperGrammar.call(this))
          .withDefaultStartRule("Program")
          .override("AssignmentExpression_assignment", ["guardIn"], this.seq(this.app("LeftHandSideExpression"), this.app("AssignmentOperator"), this.app("AssignmentExpression", [this.param(0)])))
          .override("AssignmentExpression", ["guardIn"], this.alt(this.app("ArrowFunction", [this.param(0)]), this.app("AssignmentExpression_assignment", [this.app("guardIn")]), this.app("ConditionalExpression", [this.param(0)])))
          .define("ArrowFunction", ["guardIn"], this.seq(this.app("ArrowParameters", [this.param(0)]), this.lex(this.seq(this.app("spacesNoNL"), this.prim("=>"))), this.app("ConciseBody", [this.param(0)])))
          .define("ConciseBody_noBraces", ["guardIn"], this.seq(this.not(this.prim("{")), this.app("AssignmentExpression", [this.param(0)])))
          .define("ConciseBody_withBraces", ["guardIn"], this.seq(this.prim("{"), this.app("FunctionBody"), this.prim("}")))
          .define("ConciseBody", ["guardIn"], this.alt(this.app("ConciseBody_noBraces", [this.app("guardIn")]), this.app("ConciseBody_withBraces", [this.app("guardIn")])))
          .define("ArrowParameters_unparenthesized", ["guardIn"], this.app("BindingIdentifier", [this.param(0)]))
          .define("ArrowParameters", ["guardIn"], this.alt(this.app("ArrowParameters_unparenthesized", [this.app("guardIn")]), this.app("CoverParenthesizedExpressionAndArrowParameterList", [this.param(0)])))
          .define("BindingIdentifier", ["guardIn"], this.app("identifier"))
          .define("CoverParenthesizedExpressionAndArrowParameterList_expression", ["guardIn"], this.seq(this.prim("("), this.app("Expression", [this.param(0)]), this.prim(")")))
          .define("CoverParenthesizedExpressionAndArrowParameterList_parens", ["guardIn"], this.seq(this.prim("("), this.prim(")")))
          .define("CoverParenthesizedExpressionAndArrowParameterList_params", ["guardIn"], this.seq(this.prim("("), this.app("FormalParameterList"), this.prim(")")))
          .define("CoverParenthesizedExpressionAndArrowParameterList", ["guardIn"], this.alt(this.app("CoverParenthesizedExpressionAndArrowParameterList_expression", [this.app("guardIn")]), this.app("CoverParenthesizedExpressionAndArrowParameterList_parens", [this.app("guardIn")]), this.app("CoverParenthesizedExpressionAndArrowParameterList_params", [this.app("guardIn")])))
          .build();
      });
        return new this.newGrammar("InferBraces")
          .withSuperGrammar(buildSuperGrammar.call(this))
          .withDefaultStartRule("Program")
          .define("NoBraces", [], this.app("AssignmentExpression", [this.app("withIn")]))
          .build();
    }));
});
