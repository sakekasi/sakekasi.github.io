#### [selection.data]($updocblocks/Selections/Operating_on_Selections/Data/index)

Joins the specified array of data with the current selection. The specified *values* is an array of data values (e.g. numbers or objects), or a function that returns an array of values. If a *key* function is not specified, then the first datum in *values* is assigned to the first element in the current selection, the second datum to the second selected element, and so on. When data is assigned to an element, it is stored in the property `__data__` (defined by D3), thus making the data "sticky" so that the it is available on re-selection.

The result of the `data` method is the *update* selection; this represents the selected DOM elements that were successfully bound to the specified data elements. The *update* selection also contains a reference to the [enter](Selections#enter) and [exit](Selections#exit) selections, for adding and removing nodes in correspondence with data. The *update* and *enter* selections are returned in data order and the *exit* selection in document order at the time that the selection was queried. For more details, see the short tutorial [Thinking With Joins](http://bost.ocks.org/mike/join/).

A *key* function **key**([ *d* [, *i* ]]) may be specified to control how data is joined to elements (this replaces the default by-index behavior). The key function returns a string which is used to join a datum with its corresponding element, based on the previously-bound data. For example, if each datum has a unique field `name`, the join might be specified as `.data(data, function(d) { return d.name; })`

The key function is called twice during data binding process, which proceeds in two phases.

1.    The *key* function is evaluated on the nodes to form `nodeByKeyValue`: an associative array of nodes.  The `this` context is the node, `d` is the node `__data__` member and the the second argument `i` is the selection group index.

1.    The *key* function is evaluated on each element of the *values* array - this time with *values* as the `this` context, *values*[`i`] as the first argument `d` and the *values* index `i` as the second argument - and the results are then used to attempt to look up the nodes in the `nodeByKeyValue` collection.  If the lookup is successful, the node is added to the _update selection_, any nodes not queried are added to the exit selection.  Any data elements that failed to find a matching node are used to form the enter selection.

The nodes are then queried by calculating an index for each element of the *values* array by calling the *key* function again, this time with *values* as the `this` context, *values*[`i`] as the first argument `d` and the *values* index `i` as the second argument. The key function returns a string which is used to join a datum with its corresponding element, based on the previously-bound data. For example, if each datum has a unique field `name`, the join might be specified as `.data(data, function(d) { return d.name; })`
If a key function is specified, the `data` operator also affects the index of nodes; this index is passed as the second argument `i` to any operator function arguments. However, note that existing DOM elements are not automatically reordered; use [sort](#sort) or [order](#order) as needed. For a more detailed example of how the key function affects the data join, see the tutorial [[A Bar Chart, Part 2|http://bost.ocks.org/mike/bar/2/]].

The *values* array specifies the data **for each group** in the selection. Thus, if the selection has multiple groups (such as a [d3.selectAll](#d3_selectAll) followed by a [selection.selectAll](#selectAll)), then *data* should be specified as a function that returns an array (assuming that you want different data for each group). The function will be passed the current group data (or `undefined`) and the index, with the group as the `this` context.
For example, you may bind a two-dimensional array to an initial selection, and then bind the contained inner arrays to each subselection. The *values* function in this case is the identity function: it is invoked for each group of child elements, being passed the data bound to the parent element, and returns this array of data.

```javascript
var matrix = [
 [11975,  5871, 8916, 2868],
 [ 1951, 10048, 2060, 6171],
 [ 8010, 16145, 8090, 8045],
 [ 1013,   990,  940, 6907]
];

var tr = d3.select("body").append("table").selectAll("tr")
   .data(matrix)
 .enter().append("tr");

var td = tr.selectAll("td")
   .data(function(d) { return d; })
 .enter().append("td")
   .text(function(d) { return d; });
```

If *values* is not specified, then this method returns the array of data for the first group in the selection. The length of the returned array will match the length of the first group, and the index of each datum in the returned array will match the corresponding index in the selection. If some of the elements in the selection are null, or if they have no associated data, then the corresponding element in the array will be `undefined`.

Note: the `data` method cannot be used to clear previously-bound data; use [selection.datum](#datum) instead.
